// packages/mcp-connectors/src/connectors/AppleScript/lib/llm_gemini.ts

export interface GeminiRequest {
  contents: Array<{
    parts: Array<{
      text: string;
    }>;
  }>;
  generationConfig?: {
    temperature?: number;
    maxOutputTokens?: number;
    topP?: number;
    topK?: number;
  };
}

export interface GeminiResponse {
  candidates?: Array<{
    content?: {
      parts?: Array<{
        text?: string;
      }>;
    };
    finishReason?: string;
  }>;
  error?: {
    message: string;
    code?: number;
  };
}

/**
 * Call Google Gemini API to generate AppleScript code
 */
export async function callGemini(
  prompt: string, 
  context?: string,
  apiKey?: string
): Promise<string> {
  const key = apiKey || process.env.GEMINI_API_KEY;
  if (!key) {
    throw new Error('GEMINI_API_KEY not configured');
  }

  const systemPrompt = `You are an expert AppleScript developer. Generate clean, safe AppleScript code based on user requests.

CRITICAL SAFETY RULES:
- NEVER use "do shell script" - this is completely forbidden
- NEVER access system directories like /System, /usr, /bin, /sbin
- NEVER perform file operations outside ~/Desktop, ~/Documents, ~/Downloads
- NEVER interact with security or system preference settings
- Focus ONLY on standard app automation (Finder, Safari, Music, Notes, etc.)
- Always use proper AppleScript syntax and error handling
- Return ONLY the AppleScript code, no explanations or markdown

ALLOWED PATTERNS:
- tell application "Finder" to...
- tell application "Safari" to...  
- tell application "Music" to...
- tell application "Notes" to...
- tell application "Calendar" to...
- tell application "Reminders" to...
- display dialog, display notification
- get/set volume, brightness
- Basic file operations in user directories

FORBIDDEN PATTERNS:
- do shell script
- System Events (except for very basic UI scripting)
- Administrative operations
- Network requests outside of standard apps
- File operations outside user directories
- Anything that requires sudo or admin privileges`;

  const fullPrompt = context 
    ? `${systemPrompt}\n\nContext: ${context}\n\nUser Request: ${prompt}`
    : `${systemPrompt}\n\nUser Request: ${prompt}`;

  const requestBody: GeminiRequest = {
    contents: [
      {
        parts: [
          { text: fullPrompt }
        ]
      }
    ],
    generationConfig: {
      temperature: 0.1,
      maxOutputTokens: 2048,
      topP: 0.8,
      topK: 10
    }
  };

  const response = await fetch(
    `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${key}`,
    {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody)
    }
  );

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Gemini API error (${response.status}): ${errorText}`);
  }

  const data: GeminiResponse = await response.json();
  
  if (data.error) {
    throw new Error(`Gemini error: ${data.error.message}`);
  }

  const candidate = data.candidates?.[0];
  if (!candidate || !candidate.content?.parts?.[0]?.text) {
    throw new Error('No content generated by Gemini');
  }

  let script = candidate.content.parts[0].text.trim();
  
  // Clean up common formatting issues
  script = script.replace(/^```applescript\n?/i, '');
  script = script.replace(/\n?```$/i, '');
  script = script.replace(/^```\n?/i, '');
  script = script.trim();

  // Basic validation - script should start with typical AppleScript patterns
  const validStartPatterns = [
    /^tell application "/i,
    /^set /i,
    /^display /i,
    /^get /i,
    /^if /i,
    /^repeat /i,
    /^try$/i,
    /^-- /i  // Comments are OK
  ];

  const hasValidStart = validStartPatterns.some(pattern => pattern.test(script));
  
  if (!hasValidStart && script.length > 0) {
    throw new Error('Generated script does not appear to be valid AppleScript');
  }

  return script;
}

/**
 * Test connection to Gemini API
 */
export async function testGeminiConnection(apiKey?: string): Promise<boolean> {
  try {
    await callGemini('Generate a simple AppleScript to display a dialog saying "Hello"', undefined, apiKey);
    return true;
  } catch (error) {
    console.error('Gemini connection test failed:', error);
    return false;
  }
}